/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.8 public/models/coconut.glb -o src/components/GameAssets/Coconut.jsx -r public
*/

import React, { useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import * as THREE from "three";

export function Coconut(props) {
  const {
    position = [0, 1, 0],
    scale = 0.5,
    coconutColor = "#5c230e",
    hasMonkey = true,
    monkeyColor = "#b4c728",
  } = props;

  const [isSplit, setIsSplit] = useState(false);
  const [isHovered, setIsHovered] = useState(false);

  const boxGeo = new THREE.BoxGeometry(0.6, 0.6, 0.6);

  const coconutMaterial = new THREE.MeshStandardMaterial({
    color: coconutColor,
  });

  const coconutRef = useRef();
  const coconutTopRef = useRef();
  const coconutTopRefOut = useRef();

  const coconutBottomRef = useRef();
  const coconutBottomRefOut = useRef();

  const monkeyRef = useRef();

  const { nodes, materials } = useGLTF("/models/coconut.glb");

  const startHoverEffectHandler = () => {
    setIsHovered(true);
  };

  const endHoverEffectHandler = () => {
    setIsHovered(false);
  };

  const openCoconutHandler = () => {
    setIsSplit(true);
  };

  const closeCoconutHandler = () => {
    setIsSplit(false);
  };

  useFrame((_, delta) => {
    if (coconutRef.current) {
      if (isSplit && hasMonkey) {
        coconutRef.current.children[2].position.y = 6;
        coconutRef.current.children[3].position.y = 6;
      } else if (isSplit && !hasMonkey) {
        coconutRef.current.children[2].position.y = 2;
        coconutRef.current.children[3].position.y = 2;
      } else {
        coconutRef.current.children[2].position.y = 0;
        coconutRef.current.children[3].position.y = 0;
      }
    }

    if (monkeyRef.current) {
      if (hasMonkey && isSplit) {
        monkeyRef.current.position.y = 2;
      } else {
        monkeyRef.current.position.y = 1;
      }
    }

    if (coconutBottomRef.current && !isHovered) {
      coconutBottomRef.current.rotation.y += 0.4 * delta;
      coconutBottomRefOut.current.rotation.y += 0.4 * delta;
    } else if (coconutBottomRef.current && isHovered) {
      coconutBottomRef.current.rotation.y += 1 * delta;
      coconutBottomRefOut.current.rotation.y += 1 * delta;
    }

    if (coconutTopRef.current && !isHovered) {
      coconutTopRef.current.rotation.y += 0.4 * delta;
      coconutTopRefOut.current.rotation.y += 0.4 * delta;
    } else if (coconutTopRef.current && isHovered) {
      coconutTopRef.current.rotation.y += 1 * delta;
      coconutTopRefOut.current.rotation.y += 1 * delta;
    }
  });

  return (
    <group>
      <group
        {...props}
        dispose={null}
        onPointerDown={openCoconutHandler}
        onPointerUp={closeCoconutHandler}
        onPointerOver={startHoverEffectHandler}
        onPointerLeave={endHoverEffectHandler}
        ref={coconutRef}
      >
        <mesh
          geometry={nodes.BottomOut.geometry}
          material={coconutMaterial}
          scale={2.695 * scale}
          ref={coconutBottomRefOut}
        />
        <mesh
          geometry={nodes.BottomIn.geometry}
          material={materials.CoconutInside}
          position={[0, 0.02, -0.001]}
          scale={2.627 * scale}
          ref={coconutBottomRef}
        />
        <mesh
          geometry={nodes.TopOut.geometry}
          material={coconutMaterial}
          position={[0, 0.018, 0]}
          rotation={[0, 0, 3.136]}
          scale={2.695 * scale}
          ref={coconutTopRefOut}
        />
        <mesh
          geometry={nodes.TopIn.geometry}
          material={materials.CoconutInside}
          position={[0, -0.002, -0.001]}
          rotation={[0, 0, 3.136]}
          scale={2.627 * scale}
          ref={coconutTopRef}
        />
      </group>
      {hasMonkey && (
        <mesh
          geometry={boxGeo}
          position={position}
          ref={monkeyRef}
          scale={scale}
        >
          <meshStandardMaterial color={monkeyColor} />
        </mesh>
      )}
    </group>
  );
}

useGLTF.preload("/models/coconut.glb");
